#!/usr/bin/python

import os
import sys
if 'PYERECTOR_PATH' in os.environ and \
        os.path.isdir(os.environ['PYERECTOR_PATH']):
    pyerector_path = os.environ['PYERECTOR_PATH']
    sys.path.insert(0, pyerector_path)
import release
from pyerector import *

#from pyerector.tasks import Symlink
# try to use ../build/pyerector-{relno}/pyerector
bname = '%s-%s' % (release.product, release.number)
builddir = Path(os.pardir, 'build', bname)
if builddir.isdir:
    libdir = builddir.real
else:
    import pyerector
    libdir = Path(pyerector.__file__).dirname
    del pyerector


class Clean(Target):
    def run(self):
        bdir = Path(V['basedir'])
        for sdir in bdir:
            fname = (bdir + sdir + 'pyerector')
            if fname.islink:
               fname.remove()

class Init(Target):
    def run(self):
        bdir = Path(V['basedir'])
        for sdirname in bdir:
            sdir = bdir + sdirname
            fname = sdir + 'pyerector'
            if sdir.isdir and not fname.islink:
                fname.makelink(libdir)
                #os.symlink(libdir, fname)
                #Symlink(fname, dest=libdir)

class Regression(Target):
    dependencies = (Init,)
    """Regression testing."""
    def run(self):
        import os
        subtasks = []
        bdir = Path(V['basedir'])
        for sdir in bdir:
            if sdir.isdir and \
               (sdir + 'pyerect').isfile:
                subtasks.append(
                    Echo('Calling %s/pyerect', sdir)
                )
                subtasks.append(
                    SubPyErector('all', wdir=sdir,
                        env={'PYTHONPATH': libdir})
                )
        tasks = Parallel(*tuple(subtasks))
        if callable(tasks):
            tasks()
        else:
            tasks.run(self, None, None, None)

Test.dependencies = ()
All.dependencies = (Clean, Regression,)
Default.dependencies = (Regression,)

PyErector()

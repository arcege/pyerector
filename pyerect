#!/usr/bin/python
# Copyright @ 2012 Michael P. Reilly. All rights reserved.

import os
from pyerector import *
import release

distfile = '%s-%s' % (release.product, release.number)

class VersionInfo(Tokenize):
    files = (normjoin('build', distfile, 'pyerector', 'version.py'),)
    tokenmap = VariableSet(
        V('%release.product%', release.product),
        V('%release.number%', release.number),
        V('%hg.version%'),
        V('%hg.branch%'),
        V('%hg.tags%'),
    )
    def update_tokenmap(self):
        vcs = VCS()
        assert vcs.name == 'mercurial', 'Expecting Mercurial source tree'
        self.tokenmap['%hg.version%'].value = V('hg.version').value
        self.tokenmap['%hg.branch%'].value = V('hg.branch').value
        self.tokenmap['%hg.tags%'].value = V('hg.tags').value

class PyCopy(Target):
    tasks = (
        CopyTree(srcdir='pyerector',
                 dstdir=normjoin('build', distfile, 'pyerector'),
                 exclude=['test*'],
        ),
        Copy('release.py', 'setup.py',
             'README.txt', 'LICENSE.txt', 'CHANGES.txt',
             dest=normjoin('build', distfile)
        ),
        VersionInfo,
    )

class PreCompile(Target):
    dependencies = (PyCopy,)
    tasks = (
        PyCompile(
            FileList(
                normjoin('build', distfile, 'pyerector'),
                normjoin('build', distfile, 'pyerector', 'py2'),
                pattern='*.py'),
            version='2'
        ),
        PyCompile(
            FileList(
                normjoin('build', distfile, 'pyerector'),
                normjoin('build', distfile, 'pyerector', 'py3'),
                pattern='*.py'),
            version='3'
        ),
    )

class Cleantest(Target):
    """Clean the test directory."""
    tasks = (
        Remove(files=('testdir',)),
    )
class Realclean(Target):
    """Clean up the cruft (including pyc) files."""
    directories = (os.curdir,
            'pyerector', 'pyerector/py2', 'pyerector/py3',
            'pyerector/vcs', 'testsrc'
    )
    tasks = (
        Remove(files=(
            FileIterator(directories, pattern='*.pyc'),
            FileIterator(directories, pattern='__pycache__'),
        )),
    )
    dependencies = (Clean,)
class Localtest(Target):
    """Ensure the packaging looks correct."""
    tasks = (
        Untar(root='testdir/tar', name='dist/%s.tgz' % distfile),
        Unzip(root='testdir/zip', name='dist/%s.zip' % distfile),
    )
    dependencies = (InitDirs, Packaging,)

Test.dependencies = Test.dependencies + (Localtest,)
Clean.files = ('build', 'dist', 'MANIFEST')
Clean.dependencies = (Cleantest,)
InitDirs.files = (
    normjoin('build', distfile), 'dist',
    'testdir/zip', 'testdir/tar'
)
Compile.dependencies = (PreCompile,)
Distlist = StaticIterator([distfile])
Packaging.tasks = (
    Zip(name='dist/%s.zip' % distfile, files=Distlist, root='build'),
    Tar(name='dist/%s.tgz' % distfile, files=Distlist, root='build'),
    HashGen('dist/%s.zip' % distfile, 'dist/%s.tgz' % distfile),
)

PyErector()
